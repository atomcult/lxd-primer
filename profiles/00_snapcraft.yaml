config:
  # Map host user $(id -u) to the root user in the container.
  # This means that files from the host system that are mounted into
  #   the container will appear as though they belong to root (you).
  #   This also means that any files you create as root within the
  #   container will be owned by your user on the host system.
  raw.idmap: both 1000 0

  # Setup cloud-init.
  # cloud-init allows for first-time setup when the container is created.
  # NOTE: If you want compatability with Ubuntu images 20.04 and earlier,
  #       this *needs* to be `user.user-data`, **NOT** cloud-init.user-data
  # NOTE: This does not work with all LXD images by default! ubuntu:<version>
  #       all have cloud-init enabled, but images:ubuntu-<version> do not
  #       by default. (FACT CHECK)
  user.user-data: |
    #cloud-config
    # The above comment is strictly necessary! Without it, cloud-init
    #     won't pick up your configuration

    # This just runs `apt update && apt upgrade -y`
    package_upgrade: true

    # These packages will be installed. The packages are referred to by
    #   their name in Ubuntu ppa's, but if you use cloud-init with another
    #   distribution, from my understanding, these should be translated to the
    #   equivalent packages in that distribution.
    packages:
      - fd-find
      - fish
      - git
      - kitty-terminfo
      - nnn
      - ripgrep
      - squashfuse
      - tree

    # These commands will be run (as root). Since we intend to be root
    #     with this profile, this should almost exclusively be fine. If
    #     you need to run a command as a non-root user, you can use `sudo -u <user>`
    runcmd:
      - [chsh, -s, /bin/fish]
      - [snap, install, starship]
      - [snap, install, --channel=latest/edge, snapcraft, --classic]
      # - [snap, set, system, experimental.parallel-instances=true]
      # - [snap, install, --name=snapcraft_6, --channel=6.x/stable, snapcraft, --classic]

description: Snapcraft 7 Build Container

devices:

  # It's convenient to have some basic setup common to all your containers.
  # Be wary of contamination! Half the point of containers is to have a clean environment to test.
  #
  # For my setup, I have a clean version of my configuration files (fish, git, vim, etc.)
  #     in `~/.config/lxd/<profile>` and a working version in `~/.local/share/lxd/<profile>`.
  #     If the working version ever gets too cluttered, I can just nuke it and replace with
  #     the clean copies. Note that I've chosen these directories arbitrarily.
  dot-config:
    path: /root/.config
    source: /home/jbrock/.local/share/lxd/snapcraft/dot-config
    type: disk

  dot-vim:
    path: /root/.vim
    source: /home/jbrock/.local/share/lxd/snapcraft/dot-vim
    type: disk

  # Enable networking using the default LXD bridge lxdbr0
  eth0:
    name: eth0
    network: lxdbr0
    type: nic

  # Define the rootfs, uses the default ZFS pool
  root:
    path: /
    pool: default
    type: disk

  # Bring in sensitive files.
  # For me, this is a tomb volume that contains things like my snapcraft credentials.
  secrets:
    path: /root/secrets
    source: /media/WORK
    type: disk

  # Bring in snaps and any other projects
  snaps:
    path: /root/lab
    source: /home/jbrock/lab
    type: disk

  # Bring in ssh keys readonly, to be able to push changes in git
  ssh-config:
    path: /root/.ssh
    readonly: "true"
    source: /home/jbrock/.ssh
    type: disk

name: snapcraft
used_by: []
